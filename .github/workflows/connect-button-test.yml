name: Connect Button WebSocket Test

on:
  push:
    branches: [ main ]
    paths:
      - 'client/public/simple-student.html'
      - 'server/services/WebSocketServer.ts'
      - 'server/services/TranslationService.ts'
  pull_request:
    branches: [ main ]
    paths:
      - 'client/public/simple-student.html'
      - 'server/services/WebSocketServer.ts'
      - 'server/services/TranslationService.ts'
  workflow_dispatch:  # Allow manual triggering

jobs:
  direct-websocket-test:
    name: Direct WebSocket Test
    runs-on: ubuntu-latest
    
    # Add PostgreSQL service container
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run Direct WebSocket Test
        run: |
          # Create test results directory
          mkdir -p test-results
          
          # Run the direct WebSocket test
          chmod +x run-connect-button-direct-test.sh
          ./run-connect-button-direct-test.sh
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TEST_APP_URL: http://localhost:5000
          NODE_ENV: test
        
      - name: Upload test results (Direct Test)
        if: always()  # Upload logs even on test failure
        uses: actions/upload-artifact@v4
        with:
          name: direct-websocket-test-results
          path: |
            test-results/
            server-output.log
  
  selenium-test:
    name: Selenium WebDriver Test
    runs-on: ubuntu-latest
    needs: direct-websocket-test  # Run this only if the direct test succeeds
    
    # Add PostgreSQL service container
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Dependencies
        run: |
          npm ci
          
          # Install Chromium instead of Chrome
          sudo apt-get update
          sudo apt-get install -y chromium-browser
          sudo apt-get install -y libnspr4 libnss3 libgbm1  # Required libraries
          
          # Install Selenium WebDriver
          npm install selenium-webdriver
          npm install chromedriver
          
          # Install ChromeDriver with specific setup
          CHROME_VERSION=$(chromium-browser --version | cut -d ' ' -f 2 | cut -d '.' -f 1)
          echo "Chrome (Chromium) version: $CHROME_VERSION"
          npm install chromedriver@$CHROME_VERSION || npm install chromedriver
          
          # Check versions
          chromium-browser --version
          npx chromedriver --version
          
          # Set CI environment variable to true
          echo "CI=true" >> $GITHUB_ENV
        
      - name: Run Selenium Test
        run: |
          # Create test results directory
          mkdir -p test-results
          mkdir -p screenshots
          
          # Run the Selenium test
          chmod +x run-connect-button-selenium-test.sh
          ./run-connect-button-selenium-test.sh
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TEST_APP_URL: http://localhost:5000
          NODE_ENV: test
          
      - name: Upload test results (Selenium)
        if: always()  # Upload logs even on test failure
        uses: actions/upload-artifact@v4
        with:
          name: selenium-test-results
          path: |
            test-results/
            server-output.log