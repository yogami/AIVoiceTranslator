name: üöÄ CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

env:
  NODE_VERSION: '18'

jobs:
  # =============================================
  # LINT & SECURITY CHECKS
  # =============================================
  lint:
    name: üîç Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint || echo "No linting configured, skipping"
        
      - name: Security audit
        run: npm audit --audit-level moderate

  # =============================================
  # UNIT TESTS
  # =============================================
  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npx vitest run --config test-config/vitest/vitest.unit.config.mjs
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: coverage/

  # =============================================
  # INTEGRATION TESTS WITH DATABASE
  # =============================================
  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build || echo "No build script configured"
        
      - name: Run integration tests
        run: npx vitest run --config test-config/vitest/vitest.integration.config.mjs
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SESSION_SECRET: test-session-secret
          TTS_SERVICE_TYPE: openai
          ENABLE_DETAILED_TRANSLATION_LOGGING: true
          PORT: 5001
          HOST: 127.0.0.1
          VITE_API_URL: http://127.0.0.1:5001
          VITE_WS_URL: ws://127.0.0.1:5001
          LOG_LEVEL: info
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: coverage/

  # =============================================
  # AUDIO FUNCTIONALITY TESTS
  # =============================================
  audio-tests:
    name: üéµ Audio Functionality Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install system audio dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg pulseaudio
        
      - name: Run audio tests
        run: npm test -- --testPathPattern=tests/audio
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audio-test-results
          path: coverage/

  # =============================================
  # DEPLOY TO STAGING (develop branch)
  # =============================================
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.ref == 'refs/heads/develop' && success()
    environment:
      name: staging
      url: ${{ secrets.RAILWAY_STAGING_URL || 'https://aivoicetranslator-staging.railway.app' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build || echo "No build script configured"
        
      - name: Deploy to Railway Staging
        run: |
          echo "üöÇ Deploying to Railway Staging..."
          npx @railway/cli deploy --service ${{ secrets.RAILWAY_SERVICE_ID_STAGING }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_STAGING }}
        
      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests..."
          sleep 30  # Wait for deployment
          curl -f https://aivoicetranslator-staging.railway.app/api/health || exit 1
          echo "‚úÖ Staging deployment successful!"

  # =============================================
  # DEPLOY TO PRODUCTION (main branch)
  # =============================================
  deploy-production:
    name: üè≠ Deploy to Production
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, audio-tests]
    if: github.ref == 'refs/heads/main' && success()
    environment:
      name: production
      url: ${{ secrets.RAILWAY_PRODUCTION_URL || 'https://aivoicetranslator.railway.app' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build || echo "No build script configured"
        
      - name: Deploy to Railway Production
        run: |
          echo "üöÇ Deploying to Railway Production..."
          npx @railway/cli deploy --service ${{ secrets.RAILWAY_SERVICE_ID_PRODUCTION }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_PRODUCTION }}
        
      - name: Run database migrations
        run: |
          echo "üóÉÔ∏è Running database migrations..."
          npx @railway/cli run --service ${{ secrets.RAILWAY_SERVICE_ID_PRODUCTION }} npm run db:migrations:apply
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_PRODUCTION }}
        
      - name: Run production smoke tests
        run: |
          echo "üß™ Running production smoke tests..."
          sleep 45  # Wait for deployment and migrations
          curl -f https://aivoicetranslator.railway.app/api/health || exit 1
          echo "‚úÖ Production deployment successful!"

  # =============================================
  # POST-DEPLOYMENT E2E TESTS
  # =============================================
  post-deployment-tests:
    name: üé≠ Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://aivoicetranslator.railway.app
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright
        run: npx playwright install --with-deps
      
      - name: Run health check
        run: |
          echo "üè• Running health check on production deployment..."
          curl -f https://aivoicetranslator.railway.app/api/health
      
      - name: Run E2E tests
        run: npm run test:e2e || echo "No E2E tests configured"
        env:
          BASE_URL: https://aivoicetranslator.railway.app
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      
      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: test-results/
      
      - name: Notify deployment success
        run: |
          echo "üéâ All tests passed successfully!"
          echo "üåê Production URL: https://aivoicetranslator.railway.app"