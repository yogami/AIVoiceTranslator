name: Audio E2E Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  audio-e2e-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]  # Specify Node.js version
    
    steps:
      - uses: actions/checkout@v3
        
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
        
      - name: Install Chrome
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee -a /etc/apt/sources.list.d/google.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          google-chrome --version
      
      - name: Install ChromeDriver
        run: |
          CHROME_VERSION=$(google-chrome --version | cut -d ' ' -f 3 | cut -d '.' -f 1)
          CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
          curl -Lo chromedriver.zip "https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"
          unzip chromedriver.zip
          chmod +x chromedriver
          sudo mv chromedriver /usr/local/bin/
          chromedriver --version

      - name: Install Audio Support
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2 libasound2-plugins alsa-utils alsa-oss
          sudo modprobe snd-dummy || echo "snd-dummy module not available, using alternative approach"
          # Create a virtual audio device
          echo "options snd-dummy enable=1,1,1,1,1 index=0" | sudo tee -a /etc/modprobe.d/alsa-dummy.conf || true
          # Print audio devices
          aplay -l || echo "aplay command failed but continuing"
          
      - name: Start Application
        run: |
          # Set environment variables
          export NODE_ENV=test
          export PORT=5000
          
          # Start the server in the background
          npm run dev &
          # Save the PID
          echo $! > server.pid
          
          # Wait for server to start
          sleep 10
          
          # Check if server is running
          curl -s http://localhost:5000 || echo "Server may not be fully started, but continuing tests"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
      - name: Run Audio E2E Tests
        run: |
          # Set display for Chrome
          export DISPLAY=:99
          sudo Xvfb :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
          
          # Run the tests
          cd tests/selenium
          npx mocha audio-e2e-test.js --timeout 60000
        env:
          APP_URL: http://localhost:5000
          NODE_ENV: test
          
      - name: Cleanup
        if: always()
        run: |
          # Kill the server
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi
          
          # Kill Xvfb
          pkill Xvfb || true