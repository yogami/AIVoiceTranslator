name: TTS Comparison Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'client/public/**'
      - 'server/services/**'
      - 'tests/**'
      - '.github/workflows/tts-comparison-tests.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug logging'
        required: false
        default: 'false'

jobs:
  unit-tests:
    name: TTS Comparison Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TTS unit tests
        run: |
          DEBUG=${{ github.event.inputs.debug == 'true' && 'app:*' || '' }} \
          npx mocha tests/unit/tts-comparison.test.js
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: |
            .nyc_output
            coverage
          retention-days: 7

  integration-tests:
    name: TTS Comparison Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TTS integration tests
        run: |
          DEBUG=${{ github.event.inputs.debug == 'true' && 'app:*' || '' }} \
          TTS_SERVICE_TYPE=browser \
          npx mocha tests/integration/tts-comparison-integration.test.js
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: |
            .nyc_output
            coverage
          retention-days: 7

  e2e-tests:
    name: TTS Comparison E2E Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    services:
      app:
        image: node:18
        ports:
          - 5000:5000
        options: --name app-container
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
      
      - name: Start application server
        run: |
          npm run dev &
          # Wait for server to start
          echo "Waiting for server to start..."
          sleep 10
          # Check if server is running
          curl -s http://localhost:5000/health || (echo "Server not running properly" && exit 1)
      
      - name: Run TTS e2e tests
        run: |
          DEBUG=${{ github.event.inputs.debug == 'true' && 'app:*' || '' }} \
          APP_URL=http://localhost:5000 \
          TTS_SERVICE_TYPE=browser \
          npx mocha tests/e2e/tts-comparison.test.js --timeout 60000
      
      - name: Upload test results and screenshots
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: |
            .nyc_output
            coverage
            screenshots
          retention-days: 7

  update-metrics:
    name: Update TTS Test Metrics
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: success()
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: test-artifacts
      
      - name: Merge coverage data
        run: |
          mkdir -p .nyc_output
          find test-artifacts -name '*.json' -path '*/nyc_output/*' -exec cp {} .nyc_output/ \;
      
      - name: Generate coverage report
        run: npx nyc report --reporter=json --reporter=text-summary
      
      - name: Update metrics file
        run: |
          # Extract coverage data to update metrics
          TOTAL_COVERAGE=$(npx nyc report --reporter=text-summary | grep "All files" | awk '{print $3}')
          echo "Total coverage: $TOTAL_COVERAGE"
          
          # Update metrics file - in a real implementation this would persist the metrics
          echo "TTS Comparison Feature Test Metrics:" > tts-comparison-metrics.txt
          echo "- Total Coverage: $TOTAL_COVERAGE" >> tts-comparison-metrics.txt
          echo "- Unit Tests: Passed" >> tts-comparison-metrics.txt
          echo "- Integration Tests: Passed" >> tts-comparison-metrics.txt
          echo "- E2E Tests: Passed" >> tts-comparison-metrics.txt
          echo "- CI/CD Pipeline: Success" >> tts-comparison-metrics.txt
          
          cat tts-comparison-metrics.txt
      
      - name: Upload metrics file
        uses: actions/upload-artifact@v3
        with:
          name: test-metrics
          path: tts-comparison-metrics.txt
          retention-days: 30