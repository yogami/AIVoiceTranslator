# NOTICE: Selenium testing has been disabled per UPDATED-WORKING-AGREEMENT.md
# This workflow is kept for reference but will not be triggered

name: Selenium End-to-End Tests (DISABLED)

on:
  # This workflow is disabled and will not be triggered automatically
  # Only manual workflow_dispatch is allowed for reference/testing purposes
  workflow_dispatch:  # Allow manual triggering only

permissions:
  actions: read
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    # Skip this job as Selenium testing is disabled
    if: false
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Browser and ChromeDriver
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser libnspr4 libnss3 libgbm1
        npm install selenium-webdriver chromedriver
        echo "CI=true" >> $GITHUB_ENV
      
    - name: Create test directories
      run: |
        mkdir -p test-results
        mkdir -p screenshots
      
    - name: Start application server
      run: |
        # Start the server and capture its PID
        NODE_ENV=test node server/index.js > server-output.log 2>&1 &
        SERVER_PID=$!
        echo "Server PID: $SERVER_PID"
        
        # Wait for server to be ready
        echo "Waiting for server to start..."
        for i in {1..15}; do
          if curl -s http://localhost:5000 > /dev/null; then
            echo "Server is up and running!"
            break
          fi
          if [ $i -eq 15 ]; then
            echo "Server failed to start within the timeout period"
            cat server-output.log
            kill $SERVER_PID
            exit 1
          fi
          echo "Waiting for server... (attempt $i)"
          sleep 1
        done
        
        # Save PID for later cleanup
        echo $SERVER_PID > server.pid
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        NODE_ENV: test
        
    - name: Run Selenium tests
      run: |
        # Start ChromeDriver in the background
        npx chromedriver --port=4444 > chromedriver.log 2>&1 &
        CHROMEDRIVER_PID=$!
        echo "ChromeDriver PID: $CHROMEDRIVER_PID"
        
        # Run the tests
        npx mocha tests/selenium/connect-button-e2e-test.js --timeout 30000
        TEST_RESULT=$?
        
        # Stop ChromeDriver
        kill $CHROMEDRIVER_PID
        
        # Return the original test result
        exit $TEST_RESULT
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        TEST_APP_URL: http://localhost:5000
        NODE_ENV: test
        
    - name: Clean up server
      if: always()
      run: |
        if [ -f server.pid ]; then
          SERVER_PID=$(cat server.pid)
          echo "Stopping server with PID: $SERVER_PID"
          kill $SERVER_PID || true
        fi
        
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          test-results/
          screenshots/
          server-output.log
          chromedriver.log