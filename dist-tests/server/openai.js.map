{"version":3,"file":"openai.js","sourceRoot":"","sources":["../../server/openai.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,OAAO,EAAE,eAAe,IAAI,sBAAsB,EAAE,MAAM,+BAA+B,CAAC;AAS1F;;;;;;;;GAQG;AACH,MAAM,UAAgB,eAAe,CACnC,WAAmB,EACnB,cAAsB,EACtB,cAAsB,EACtB,kBAA2B;;;YAE3B,yCAAyC;YACzC,sBAAO,sBAAsB,CAC3B,WAAW,EACX,cAAc,EACd,cAAc,EACd,kBAAkB,CACnB,EAAC;;;CACH","sourcesContent":["/**\n * OpenAI Service - Transcription and Translation\n * \n * This file serves as a facade for the TranslationService\n * Implements Pragmatic Principle #11: Don't Repeat Yourself\n */\n\nimport { translateSpeech as translateSpeechService } from './services/TranslationService';\n\n// Re-export the TranslationResult interface\nexport interface TranslationResult {\n  originalText: string;\n  translatedText: string;\n  audioBuffer: Buffer;\n}\n\n/**\n * Transcribe and translate speech using OpenAI Whisper and GPT models\n * \n * @param audioBuffer - Buffer containing audio data to transcribe\n * @param sourceLanguage - Language code of the source audio\n * @param targetLanguage - Language code to translate to\n * @param preTranscribedText - (Optional) If you already have the transcribed text, provide it to skip transcription\n * @returns - Object containing original text, translated text and audio buffer\n */\nexport async function translateSpeech(\n  audioBuffer: Buffer, \n  sourceLanguage: string, \n  targetLanguage: string,\n  preTranscribedText?: string\n): Promise<TranslationResult> {\n  // Delegate to the service implementation\n  return translateSpeechService(\n    audioBuffer,\n    sourceLanguage,\n    targetLanguage,\n    preTranscribedText\n  );\n}"]}