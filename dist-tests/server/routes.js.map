{"version":3,"file":"routes.js","sourceRoot":"","sources":["../../server/routes.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * API Routes\n * \n * Express routes for the API\n * Follows Clean Code principles:\n * - Single Responsibility Principle: Each handler does one thing\n * - DRY: Constants are defined once and reused\n * - Explicit error handling with try/catch\n * \n * Also provides routes for code metrics collection and analysis\n */\nimport { Router, Request, Response } from 'express';\nimport { storage } from './storage';\n\nexport const apiRoutes = Router();\n\n// SOLID: Single Responsibility - Each handler has one specific task\n// Each route is explicitly typed for better code safety\n\n/**\n * Get available languages\n * Returns a list of supported languages from the storage\n */\napiRoutes.get('/languages', async (req: Request, res: Response) => {\n  try {\n    // Retrieve languages from the storage service\n    const languages = await storage.getLanguages();\n    \n    res.json(languages);\n  } catch (error) {\n    console.error('Error fetching languages:', error);\n    res.status(500).json({ \n      error: 'Failed to retrieve languages',\n      message: error instanceof Error ? error.message : 'Unknown error' \n    });\n  }\n});\n\n/**\n * Get active languages\n * Returns only languages that are marked as active\n */\napiRoutes.get('/languages/active', async (req: Request, res: Response) => {\n  try {\n    // Retrieve only active languages\n    const activeLanguages = await storage.getActiveLanguages();\n    \n    res.json(activeLanguages);\n  } catch (error) {\n    console.error('Error fetching active languages:', error);\n    res.status(500).json({ \n      error: 'Failed to retrieve active languages',\n      message: error instanceof Error ? error.message : 'Unknown error' \n    });\n  }\n});\n\n/**\n * Health check endpoint\n * Returns basic server health information\n */\napiRoutes.get('/health', (req: Request, res: Response) => {\n  try {\n    // API versioning as a constant - Single source of truth\n    const API_VERSION = '1.0.0';\n    \n    res.json({ \n      status: 'ok', \n      timestamp: new Date().toISOString(),\n      version: API_VERSION,\n      database: 'connected', // We're using in-memory storage, so it's always connected\n      environment: process.env.NODE_ENV || 'development'\n    });\n  } catch (error) {\n    console.error('Error in health check:', error);\n    res.status(500).json({ error: 'Health check failed' });\n  }\n});\n\n/**\n * Get user information\n * In a real app, this would be authenticated\n */\napiRoutes.get('/user', async (req: Request, res: Response) => {\n  try {\n    // In a real application, we would retrieve the user ID from the auth token\n    // For now, just retrieve user #1 for testing\n    const user = await storage.getUser(1);\n    \n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n    \n    res.json(user);\n  } catch (error) {\n    console.error('Error fetching user:', error);\n    res.status(500).json({ \n      error: 'Failed to retrieve user',\n      message: error instanceof Error ? error.message : 'Unknown error' \n    });\n  }\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}