{"version":3,"file":"config.js","sourceRoot":"","sources":["../../server/config.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,MAAM,IAAI,CAAC;AACzB,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAC7B,OAAO,EAAE,aAAa,EAAE,MAAM,KAAK,CAAC;AAEpC,IAAM,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAClD,IAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AAC3C,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAE9C,8BAA8B;AAC9B,IAAI,CAAC;IACH,IAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IAC3C,IAAI,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC;QAC3B,OAAO,CAAC,GAAG,CAAC,8CAA8C,CAAC,CAAC;QAC5D,IAAM,SAAS,GAAG,EAAE,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC;aAC/C,KAAK,CAAC,IAAI,CAAC;aACX,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAApC,CAAoC,CAAC;aACpD,MAAM,CAAC,UAAC,GAAG,EAAE,IAAI;YACV,IAAA,KAAe,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAA7B,GAAG,QAAA,EAAE,KAAK,QAAmB,CAAC;YACrC,IAAI,GAAG,IAAI,KAAK,EAAE,CAAC;gBACjB,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;YAC7D,CAAC;YACD,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAA4B,CAAC,CAAC;QAEnC,uBAAuB;QACvB,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,UAAC,EAAY;gBAAX,GAAG,QAAA,EAAE,KAAK,QAAA;YAC5C,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC;AACH,CAAC;AAAC,OAAO,KAAK,EAAE,CAAC;IACf,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;AACnD,CAAC;AAED,MAAM,CAAC,IAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst rootDir = path.resolve(__dirname, '..');\n\n// Directly read the .env file\ntry {\n  const envFile = path.join(rootDir, '.env');\n  if (fs.existsSync(envFile)) {\n    console.log('Loading environment variables from .env file');\n    const envConfig = fs.readFileSync(envFile, 'utf8')\n      .split('\\n')\n      .filter(line => line.trim() && !line.startsWith('#'))\n      .reduce((acc, line) => {\n        const [key, value] = line.split('=');\n        if (key && value) {\n          acc[key.trim()] = value.trim().replace(/^[\"']|[\"']$/g, '');\n        }\n        return acc;\n      }, {} as Record<string, string>);\n    \n    // Apply to process.env\n    Object.entries(envConfig).forEach(([key, value]) => {\n      process.env[key] = value;\n    });\n  }\n} catch (error) {\n  console.error('Error loading .env file:', error);\n}\n\nexport const OPENAI_API_KEY = process.env.OPENAI_API_KEY;"]}