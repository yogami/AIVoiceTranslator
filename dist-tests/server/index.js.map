{"version":3,"file":"index.js","sourceRoot":"","sources":["../../server/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * AIVoiceTranslator Server\n * \n * Main server entry point with Express and WebSocket setup\n */\nimport express from 'express';\nimport { createServer } from 'http';\nimport { WebSocketServer } from './services/WebSocketServer';\nimport { apiRoutes } from './routes';\n\nimport './config';\n// SOLID: Single Responsibility - CORS middleware has one job\nconst configureCorsMiddleware = (app: express.Express): void => {\n  app.use((req, res, next) => {\n    // Allow requests from any origin\n    res.header('Access-Control-Allow-Origin', '*');\n    // Allow these HTTP methods\n    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n    // Allow these headers\n    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\n    // Allow credentials\n    res.header('Access-Control-Allow-Credentials', 'true');\n    \n    // Handle preflight requests\n    if (req.method === 'OPTIONS') {\n      res.sendStatus(200);\n    } else {\n      next();\n    }\n  });\n  \n  console.log('CORS middleware configured successfully');\n};\n\nasync function startServer() {\n  // Check for OpenAI API key\n  if (!process.env.OPENAI_API_KEY) {\n    console.warn('⚠️ No OPENAI_API_KEY found in environment variables');\n    console.warn('Translation functionality will be limited');\n  } else {\n    console.log('OpenAI API key status: Present');\n    console.log('OpenAI client initialized successfully');\n    console.log('OpenAI Streaming - API key status: Present');\n    console.log('OpenAI Streaming - client initialized successfully');\n  }\n  \n  // Create Express app\n  const app = express();\n  \n  // Apply CORS middleware (Open/Closed Principle - extending functionality without modifying existing code)\n  configureCorsMiddleware(app);\n  \n  // Parse JSON in request body\n  app.use(express.json());\n  \n  // Add API routes\n  app.use('/api', apiRoutes);\n  \n  // Create HTTP server\n  const httpServer = createServer(app);\n  \n  // Create WebSocket server\n  const wss = new WebSocketServer(httpServer);\n  \n  // Serve static files from client/public directory\n  app.use(express.static('client/public'));\n  \n  // Route for student page\n  app.get('/student', (req, res) => {\n    res.sendFile('simple-student.html', { root: 'client/public' });\n  });\n  \n  // Route for teacher page\n  app.get('/teacher', (req, res) => {\n    // Find the teacher HTML file\n    if (req.query.demo === 'true') {\n      res.sendFile('simple-speech-test.html', { root: 'client/public' });\n    } else {\n      res.sendFile('simple-speech-test.html', { root: 'client/public' });\n    }\n  });\n  \n  // Route for metrics dashboard\n  app.get('/metrics', (req, res) => {\n    res.sendFile('metrics-dashboard.html', { root: 'client/public' });\n  });\n  \n  // Route for feature tests dashboard\n  app.get('/tests', (req, res) => {\n    res.sendFile('feature-tests-dashboard.html', { root: 'client/public' });\n  });\n  \n  // Serve index.html for root route\n  app.get('/', (req, res) => {\n    res.sendFile('index.html', { root: 'client' });\n  });\n  \n  // Catch-all route for any other routes\n  app.get('*', (req, res) => {\n    res.sendFile('index.html', { root: 'client' });\n  });\n  \n  // Start server\n  const port = process.env.PORT || 5000;\n  httpServer.listen(port, () => {\n    console.log(`${new Date().toLocaleTimeString()} [express] serving on port ${port}`);\n  });\n}\n\n// Start the server\nstartServer().catch(error => {\n  console.error('Error starting server:', error);\n  process.exit(1);\n});\n"]}