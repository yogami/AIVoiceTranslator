{"version":3,"file":"vite.js","sourceRoot":"","sources":["../../server/vite.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n"]}