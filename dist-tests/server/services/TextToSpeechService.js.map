{"version":3,"file":"TextToSpeechService.js","sourceRoot":"","sources":["../../../server/services/TextToSpeechService.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Text to Speech Service\n * \n * This service is responsible for generating speech from translated text\n * with preserved emotional tone using OpenAI's Text-to-Speech API.\n */\n\nimport OpenAI from 'openai';\nimport fs from 'fs';\nimport path from 'path';\nimport { promisify } from 'util';\nimport { createHash } from 'crypto';\n\n// Promisify file system operations\nconst writeFile = promisify(fs.writeFile);\nconst mkdir = promisify(fs.mkdir);\nconst readFile = promisify(fs.readFile);\nconst stat = promisify(fs.stat);\nconst access = promisify(fs.access);\n\n// Constants for cache directory\nconst CACHE_DIR = path.join(process.cwd(), 'audio-cache');\nconst MAX_CACHE_AGE_MS = 24 * 60 * 60 * 1000; // 24 hours\nconst TEMP_DIR = process.env.TEMP_DIR || path.join(process.cwd(), 'temp');\n\n// Voice options by language and gender\nconst VOICE_OPTIONS: Record<string, string[]> = {\n  'en': ['alloy', 'echo', 'fable', 'onyx', 'nova', 'shimmer'], // English\n  'es': ['nova', 'echo', 'alloy'], // Spanish (using neutral voices)\n  'fr': ['alloy', 'nova', 'shimmer'], // French (using neutral voices)\n  'de': ['onyx', 'nova', 'shimmer'], // German (using neutral voices)\n  'ja': ['nova', 'alloy', 'echo'], // Japanese (using neutral voices)\n  'zh': ['alloy', 'nova', 'onyx'], // Chinese (using neutral voices)\n  'default': ['nova', 'alloy'] // Default fallback\n};\n\n// Emotion patterns to detect\ninterface EmotionPattern {\n  name: string;\n  voiceStyle: string;\n  patterns: RegExp[];\n}\n\n// Emotion detection patterns\nconst EMOTION_PATTERNS: EmotionPattern[] = [\n  {\n    name: 'excited',\n    voiceStyle: 'excited', // Higher pitch, faster pace\n    patterns: [\n      /\\!+/g, // Exclamation marks\n      /amazing|fantastic|incredible|awesome|wow|wonderful/gi,\n      /😄|😃|😁|🤩|😍|🎉|💯|⚡/g // Excited emojis\n    ]\n  },\n  {\n    name: 'serious',\n    voiceStyle: 'serious', // Slower, more deliberate pace\n    patterns: [\n      /important|critical|crucial|serious|warning|caution|beware/gi,\n      /⚠️|❗|🚨|🔴|❓/g // Warning/serious emojis\n    ]\n  },\n  {\n    name: 'calm',\n    voiceStyle: 'calming', // Soft, soothing tone\n    patterns: [\n      /relax|calm|gentle|peaceful|quiet|softly/gi,\n      /😌|🧘|💭|☮️|💫/g // Calm emojis\n    ]\n  },\n  {\n    name: 'sad',\n    voiceStyle: 'sad', // Lower pitch, slower pace\n    patterns: [\n      /sad|sorry|unfortunately|regret|disappointed/gi,\n      /😢|😥|😔|😞|💔/g // Sad emojis\n    ]\n  }\n];\n\n/**\n * Interface for emotion detection result\n */\ninterface DetectedEmotion {\n  emotion: string;\n  confidence: number;\n}\n\n/**\n * Options for text-to-speech synthesis\n */\nexport interface TextToSpeechOptions {\n  text: string;\n  languageCode: string;\n  voice?: string;\n  speed?: number;\n  preserveEmotions?: boolean;\n}\n\n/**\n * Interface for text-to-speech service\n */\nexport interface ITextToSpeechService {\n  synthesizeSpeech(options: TextToSpeechOptions): Promise<Buffer>;\n}\n\n/**\n * Browser Speech Synthesis Service\n * This service doesn't actually generate audio data on the server.\n * It returns an empty buffer and signals the client to use browser's SpeechSynthesis API.\n */\nexport class BrowserSpeechSynthesisService implements ITextToSpeechService {\n  /**\n   * Instead of generating audio on the server, returns a special marker buffer\n   * The client will recognize this marker and use the browser's SpeechSynthesis API\n   */\n  public async synthesizeSpeech(options: TextToSpeechOptions): Promise<Buffer> {\n    console.log(`Using browser speech synthesis for text (${options.text.length} chars) in ${options.languageCode}`);\n    \n    // Create a special marker buffer that the client will recognize\n    // We're using a text encoding with a specific header to signal browser speech synthesis\n    const markerText = JSON.stringify({\n      type: 'browser-speech',\n      text: options.text,\n      languageCode: options.languageCode,\n      preserveEmotions: options.preserveEmotions,\n      speed: options.speed || 1.0,\n      autoPlay: true // Enable automatic playback to match OpenAI behavior\n    });\n    \n    // Return the marker as a buffer\n    return Buffer.from(markerText);\n  }\n}\n\n/**\n * Silent Text to Speech Service\n * This is a fallback service that just returns an empty audio buffer\n * Useful for debugging or when no audio output is desired\n */\nexport class SilentTextToSpeechService implements ITextToSpeechService {\n  public async synthesizeSpeech(_options: TextToSpeechOptions): Promise<Buffer> {\n    console.log('Using silent (no audio) TTS service');\n    \n    // Return an empty buffer - no audio will be played\n    return Buffer.from([]);\n  }\n}\n\n/**\n * OpenAI Text to Speech Service\n * Handles text-to-speech conversion using OpenAI's TTS API\n */\nexport class OpenAITextToSpeechService implements ITextToSpeechService {\n  private readonly openai: OpenAI;\n  \n  constructor(openai: OpenAI) {\n    this.openai = openai;\n    this.ensureCacheDirectoryExists();\n  }\n  \n  /**\n   * Ensure cache directory exists\n   */\n  private async ensureCacheDirectoryExists(): Promise<void> {\n    try {\n      await access(CACHE_DIR, fs.constants.F_OK);\n    } catch (error) {\n      // Directory doesn't exist, create it\n      try {\n        await mkdir(CACHE_DIR, { recursive: true });\n        console.log(`Created audio cache directory: ${CACHE_DIR}`);\n      } catch (mkdirError) {\n        console.error('Error creating audio cache directory:', mkdirError);\n      }\n    }\n    \n    try {\n      await access(TEMP_DIR, fs.constants.F_OK);\n    } catch (error) {\n      // Directory doesn't exist, create it\n      try {\n        await mkdir(TEMP_DIR, { recursive: true });\n        console.log(`Created temp directory: ${TEMP_DIR}`);\n      } catch (mkdirError) {\n        console.error('Error creating temp directory:', mkdirError);\n      }\n    }\n  }\n  \n  /**\n   * Generate cache key for a TTS request\n   */\n  private generateCacheKey(options: TextToSpeechOptions): string {\n    const dataToHash = JSON.stringify({\n      text: options.text,\n      languageCode: options.languageCode,\n      voice: options.voice,\n      speed: options.speed,\n      preserveEmotions: options.preserveEmotions\n    });\n    \n    return createHash('md5').update(dataToHash).digest('hex');\n  }\n  \n  /**\n   * Check if cached audio exists and is valid\n   */\n  private async getCachedAudio(cacheKey: string): Promise<Buffer | null> {\n    const cachePath = path.join(CACHE_DIR, `${cacheKey}.mp3`);\n    \n    try {\n      // Check if file exists\n      await access(cachePath, fs.constants.F_OK);\n      \n      // Check file age\n      const fileStats = await stat(cachePath);\n      const fileAgeMs = Date.now() - fileStats.mtimeMs;\n      \n      if (fileAgeMs < MAX_CACHE_AGE_MS) {\n        console.log(`Using cached audio: ${cachePath}`);\n        return await readFile(cachePath);\n      } else {\n        console.log(`Cache expired for: ${cachePath}`);\n        return null;\n      }\n    } catch (error) {\n      // File doesn't exist or can't be accessed\n      return null;\n    }\n  }\n  \n  /**\n   * Save audio to cache\n   */\n  private async cacheAudio(cacheKey: string, audioBuffer: Buffer): Promise<void> {\n    const cachePath = path.join(CACHE_DIR, `${cacheKey}.mp3`);\n    \n    try {\n      await writeFile(cachePath, audioBuffer);\n      console.log(`Cached audio to: ${cachePath}`);\n    } catch (error) {\n      console.error('Error caching audio:', error);\n    }\n  }\n  \n  /**\n   * Detect emotions in text\n   */\n  private detectEmotions(text: string): DetectedEmotion[] {\n    const detectedEmotions: DetectedEmotion[] = [];\n    \n    // Check for each emotion pattern\n    EMOTION_PATTERNS.forEach(emotionPattern => {\n      let matchCount = 0;\n      let totalMatches = 0;\n      \n      // Check each pattern for this emotion\n      emotionPattern.patterns.forEach(pattern => {\n        const matches = text.match(pattern);\n        if (matches && matches.length > 0) {\n          matchCount++;\n          totalMatches += matches.length;\n        }\n      });\n      \n      // Calculate confidence - based on how many different patterns matched\n      if (matchCount > 0) {\n        const patternRatio = matchCount / emotionPattern.patterns.length;\n        const textLength = text.length;\n        // Normalized confidence (0-1) with some smoothing based on text length\n        const confidence = Math.min(0.3 + (patternRatio * 0.5) + (totalMatches / textLength) * 20, 1);\n        \n        detectedEmotions.push({\n          emotion: emotionPattern.name,\n          confidence\n        });\n      }\n    });\n    \n    // Sort by confidence (descending)\n    return detectedEmotions.sort((a, b) => b.confidence - a.confidence);\n  }\n  \n  /**\n   * Select appropriate voice for language and emotion\n   */\n  private selectVoice(languageCode: string, detectedEmotion?: string): string {\n    // Extract base language code (e.g., 'en' from 'en-US')\n    const baseLanguage = languageCode.split('-')[0].toLowerCase();\n    \n    // Get available voices for this language\n    const availableVoices = VOICE_OPTIONS[baseLanguage] || VOICE_OPTIONS.default;\n    \n    // Simple voice selection logic - can be extended\n    if (detectedEmotion === 'excited') {\n      // For excited: prefer echo or alloy\n      return availableVoices.includes('echo') ? 'echo' : availableVoices[0];\n    } else if (detectedEmotion === 'serious') {\n      // For serious: prefer onyx\n      return availableVoices.includes('onyx') ? 'onyx' : availableVoices[0];\n    } else if (detectedEmotion === 'calm') {\n      // For calm: prefer nova\n      return availableVoices.includes('nova') ? 'nova' : availableVoices[0];\n    } else if (detectedEmotion === 'sad') {\n      // For sad: prefer shimmer\n      return availableVoices.includes('shimmer') ? 'shimmer' : availableVoices[0];\n    }\n    \n    // Default to first available voice\n    return availableVoices[0];\n  }\n  \n  /**\n   * Adjust speech parameters based on detected emotion\n   */\n  private adjustSpeechParams(emotion: string, options: TextToSpeechOptions): {\n    voice: string;\n    speed: number;\n    input: string;\n  } {\n    let voice = options.voice || this.selectVoice(options.languageCode, emotion);\n    let speed = options.speed || 1.0;\n    let input = options.text;\n    \n    // Adjust parameters based on emotion\n    switch (emotion) {\n      case 'excited':\n        speed = Math.min(speed * 1.2, 1.75); // Faster for excitement\n        // Add SSML markup for emphasis - not used in OpenAI TTS directly but in prompt preparation\n        input = options.text.replace(\n          /(!+|\\bwow\\b|\\bamazing\\b|\\bincredible\\b|\\bawesome\\b)/gi,\n          match => match.toUpperCase()\n        );\n        break;\n        \n      case 'serious':\n        speed = Math.max(speed * 0.9, 0.7); // Slower for seriousness\n        // Add more spacing between important words\n        input = options.text.replace(\n          /(\\bimportant\\b|\\bcritical\\b|\\bcrucial\\b|\\bserious\\b|\\bwarning\\b)/gi,\n          match => `. ${match.toUpperCase()} .`\n        );\n        break;\n        \n      case 'calm':\n        speed = Math.max(speed * 0.85, 0.7); // Slower for calmness\n        break;\n        \n      case 'sad':\n        speed = Math.max(speed * 0.8, 0.7); // Slower for sadness\n        break;\n        \n      default:\n        // No modifications for default\n        break;\n    }\n    \n    return { voice, speed, input };\n  }\n  \n  /**\n   * Format input text with SSML (Speech Synthesis Markup Language)\n   * Note: OpenAI TTS doesn't support SSML directly but we can use text formatting\n   * to better convey mood to the model\n   */\n  private formatInputForEmotion(text: string, emotion: string): string {\n    // Basic formatting based on emotion\n    switch (emotion) {\n      case 'excited':\n        return text.replace(/\\!/g, '!!').replace(/\\./g, '! ');\n      case 'serious':\n        return text.replace(/(\\w+)/g, (match) => {\n          if (match.length > 4 && Math.random() > 0.7) {\n            return match.toUpperCase();\n          }\n          return match;\n        });\n      case 'calm':\n        return text.replace(/\\./g, '... ').replace(/\\!/g, '.');\n      case 'sad':\n        return text.replace(/\\./g, '... ').replace(/\\!/g, '...');\n      default:\n        return text;\n    }\n  }\n  \n  /**\n   * Synthesize speech from text using OpenAI's TTS API\n   */\n  public async synthesizeSpeech(options: TextToSpeechOptions): Promise<Buffer> {\n    // Generate cache key\n    const cacheKey = this.generateCacheKey(options);\n    \n    // Check cache first\n    const cachedAudio = await this.getCachedAudio(cacheKey);\n    if (cachedAudio) {\n      return cachedAudio;\n    }\n    \n    try {\n      console.log(`Synthesizing speech for text (${options.text.length} chars) in ${options.languageCode}`);\n      \n      let voice = options.voice || this.selectVoice(options.languageCode);\n      let speed = options.speed || 1.0;\n      let input = options.text;\n      \n      // If emotion preservation is requested\n      if (options.preserveEmotions) {\n        // Detect emotions in the text\n        const detectedEmotions = this.detectEmotions(options.text);\n        \n        if (detectedEmotions.length > 0) {\n          // Use the highest confidence emotion\n          const topEmotion = detectedEmotions[0];\n          console.log(`Detected emotion: ${topEmotion.emotion} (confidence: ${topEmotion.confidence.toFixed(2)})`);\n          \n          // Adjust speech parameters\n          const adjustedParams = this.adjustSpeechParams(topEmotion.emotion, options);\n          voice = adjustedParams.voice;\n          speed = adjustedParams.speed;\n          \n          // Format input for emotion if confidence is high enough\n          if (topEmotion.confidence > 0.5) {\n            input = this.formatInputForEmotion(adjustedParams.input, topEmotion.emotion);\n          } else {\n            input = adjustedParams.input;\n          }\n        }\n      }\n      \n      // Temporary file path for the output\n      const outputFilePath = path.join(TEMP_DIR, `tts-${Date.now()}.mp3`);\n      \n      // Create speech using OpenAI's API\n      console.log(`Using voice: ${voice}, speed: ${speed}`);\n      \n      const mp3 = await this.openai.audio.speech.create({\n        model: \"tts-1\", // Basic model, use tts-1-hd for higher quality\n        voice: voice,\n        input: input,\n        speed: speed,\n        response_format: \"mp3\",\n      });\n      \n      // Get the audio as a buffer\n      const buffer = Buffer.from(await mp3.arrayBuffer());\n      \n      // Save to file (optional - for debugging)\n      await writeFile(outputFilePath, buffer);\n      console.log(`Saved synthesized speech to: ${outputFilePath}`);\n      \n      // Cache the result for future use\n      await this.cacheAudio(cacheKey, buffer);\n      \n      return buffer;\n    } catch (error) {\n      console.error('Error synthesizing speech:', error);\n      throw new Error(`Speech synthesis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n\n/**\n * Text to Speech Factory class\n * Creates and provides different text-to-speech service implementations\n */\nexport class TextToSpeechFactory {\n  private static instance: TextToSpeechFactory;\n  private openai: OpenAI;\n  private services: Map<string, ITextToSpeechService> = new Map();\n  \n  private constructor() {\n    // Initialize OpenAI client with API key from environment\n    const apiKey = process.env.OPENAI_API_KEY || '';\n    \n    try {\n      this.openai = new OpenAI({ \n        apiKey: apiKey || 'sk-placeholder-for-initialization-only' \n      });\n      console.log('OpenAI client initialized for TTS service');\n    } catch (error) {\n      console.error('Error initializing OpenAI client for TTS:', error);\n      this.openai = new OpenAI({ apiKey: 'sk-placeholder-for-initialization-only' });\n    }\n    \n    // Register services\n    this.services.set('openai', new OpenAITextToSpeechService(this.openai));\n    this.services.set('browser', new BrowserSpeechSynthesisService());\n    this.services.set('silent', new SilentTextToSpeechService());\n  }\n  \n  public static getInstance(): TextToSpeechFactory {\n    if (!TextToSpeechFactory.instance) {\n      TextToSpeechFactory.instance = new TextToSpeechFactory();\n    }\n    return TextToSpeechFactory.instance;\n  }\n  \n  public getService(serviceType: string = 'openai'): ITextToSpeechService {\n    const service = this.services.get(serviceType.toLowerCase());\n    if (!service) {\n      console.warn(`TTS service '${serviceType}' not found, falling back to openai`);\n      return this.services.get('openai')!;\n    }\n    return service;\n  }\n}\n\n// Export factory instance for getting TTS services\nexport const ttsFactory = TextToSpeechFactory.getInstance();\n\n// Export a convenience function to get the default TTS service (backward compatibility)\nexport const textToSpeechService = {\n  synthesizeSpeech: async (options: TextToSpeechOptions): Promise<Buffer> => {\n    // Get TTS service type from environment or default to 'openai'\n    const serviceType = process.env.TTS_SERVICE_TYPE || 'openai';\n    return ttsFactory.getService(serviceType).synthesizeSpeech(options);\n  }\n};"]}