{"version":3,"file":"WebSocketServer.js","sourceRoot":"","sources":["../../../server/services/WebSocketServer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * WebSocket Server\n * \n * Handles real-time communication between teacher and students\n */\nimport { Server } from 'http';\nimport { WebSocketServer as WSServer } from 'ws';\nimport { speechTranslationService } from './TranslationService';\nimport { URL } from 'url';\n\n// Custom WebSocketClient type for our server\ntype WebSocketClient = WebSocket & {\n  isAlive: boolean;\n  sessionId: string;\n  on: (event: string, listener: (...args: any[]) => void) => WebSocketClient;\n  terminate: () => void;\n  ping: () => void;\n}\n\nexport class WebSocketServer {\n  private wss: WSServer;\n  // We use the speechTranslationService facade\n  \n  // Connection tracking\n  private connections: Set<WebSocketClient> = new Set();\n  private roles: Map<WebSocketClient, string> = new Map();\n  private languages: Map<WebSocketClient, string> = new Map();\n  private sessionIds: Map<WebSocketClient, string> = new Map();\n  private clientSettings: Map<WebSocketClient, any> = new Map();\n  \n  // Stats\n  private sessionCounter: number = 0;\n  \n  constructor(server: Server) {\n    // Initialize WebSocket server with CORS settings\n    this.wss = new WSServer({ \n      server,\n      path: '/ws',\n      // Add explicit CORS handling for WebSocket (following the Single Responsibility Principle)\n      verifyClient: (info, callback) => {\n        // Allow all origins for WebSocket connections\n        console.log('WebSocket connection verification, headers:', JSON.stringify(info.req.headers, null, 2));\n        callback(true); // Always accept the connection\n      }\n    });\n    \n    // We now use the imported speechTranslationService instead of creating a new instance\n    \n    // Set up event handlers\n    this.setupEventHandlers();\n    \n    console.log('WebSocket server initialized and listening on path: /ws');\n  }\n  \n  /**\n   * Set up WebSocket server event handlers\n   */\n  private setupEventHandlers(): void {\n    // Handle new connections\n    this.wss.on('connection', (ws: WebSocket, request) => {\n      // Cast WebSocket to our custom WebSocketClient type\n      this.handleConnection(ws as unknown as WebSocketClient, request);\n    });\n    \n    // Set up periodic ping to keep connections alive\n    this.setupHeartbeat();\n  }\n  \n  /**\n   * Handle new WebSocket connection\n   */\n  private handleConnection(ws: WebSocketClient, request: any): void {\n    try {\n      // Log connection information\n      console.log('New WebSocket connection from', request.socket.remoteAddress, 'path:', request.url);\n      \n      // Log headers for debugging\n      console.log('Headers:', JSON.stringify(request.headers, null, 2));\n      \n      // Parse URL to get query parameters\n      const url = new URL(request.url, `http://${request.headers.host}`);\n      const role = url.searchParams.get('role');\n      const language = url.searchParams.get('language');\n      \n      // Set initial role from URL if provided\n      if (role) {\n        console.log(`Setting initial role to '${role}' from URL query parameter`);\n        this.roles.set(ws, role);\n      }\n      \n      // Set initial language from URL if provided\n      if (language) {\n        this.languages.set(ws, language);\n      }\n      \n      // Generate a unique session ID\n      const sessionId = `session_${Date.now()}_${this.sessionCounter++}`;\n      this.sessionIds.set(ws, sessionId);\n      ws.sessionId = sessionId;\n      \n      // Add to connections set\n      this.connections.add(ws);\n      \n      // Mark as alive for heartbeat\n      ws.isAlive = true;\n      \n      // Set up message handler\n      ws.on('message', (message: Buffer) => {\n        this.handleMessage(ws, message.toString());\n      });\n      \n      // Set up close handler\n      ws.on('close', () => {\n        this.handleClose(ws);\n      });\n      \n      // Set up error handler\n      ws.on('error', (error) => {\n        console.error('WebSocket error:', error);\n      });\n      \n      // Set up pong handler for heartbeat\n      ws.on('pong', () => {\n        ws.isAlive = true;\n      });\n      \n      // Send connection confirmation\n      this.sendConnectionConfirmation(ws);\n    } catch (error) {\n      console.error('Error handling new connection:', error);\n    }\n  }\n  \n  /**\n   * Send connection confirmation to client\n   */\n  private sendConnectionConfirmation(ws: WebSocketClient): void {\n    try {\n      const sessionId = this.sessionIds.get(ws);\n      const role = this.roles.get(ws);\n      const language = this.languages.get(ws);\n      \n      const message = {\n        type: 'connection',\n        status: 'connected',\n        sessionId,\n        role,\n        language\n      };\n      \n      ws.send(JSON.stringify(message));\n      console.log('Sending connection confirmation with sessionId:', sessionId);\n      console.log('Connection confirmation sent successfully');\n    } catch (error) {\n      console.error('Error sending connection confirmation:', error);\n    }\n  }\n  \n  /**\n   * Handle incoming WebSocket message\n   */\n  async handleMessage(ws: WebSocketClient, data: string): Promise<void> {\n    try {\n      // Parse message data\n      const message = JSON.parse(data);\n      \n      // Process message based on type\n      switch (message.type) {\n        case 'register':\n          this.handleRegisterMessage(ws, message);\n          break;\n        \n        case 'transcription':\n          await this.handleTranscriptionMessage(ws, message);\n          break;\n        \n        case 'tts_request':\n          await this.handleTTSRequestMessage(ws, message);\n          break;\n          \n        case 'audio':\n          await this.handleAudioMessage(ws, message);\n          break;\n          \n        case 'settings':\n          this.handleSettingsMessage(ws, message);\n          break;\n          \n        case 'ping':\n          this.handlePingMessage(ws, message);\n          break;\n          \n        case 'pong':\n          // No specific handling needed\n          break;\n          \n        default:\n          console.warn('Unknown message type:', message.type);\n      }\n    } catch (error) {\n      console.error('Error handling message:', error);\n    }\n  }\n  \n  /**\n   * Handle registration message\n   */\n  private handleRegisterMessage(ws: WebSocketClient, message: any): void {\n    console.log('Processing message type=register from connection:', \n      `role=${message.role}, languageCode=${message.languageCode}`);\n    \n    const currentRole = this.roles.get(ws);\n    \n    // Update role if provided\n    if (message.role) {\n      if (currentRole !== message.role) {\n        console.log(`Changing connection role from ${currentRole} to ${message.role}`);\n      }\n      this.roles.set(ws, message.role);\n    }\n    \n    // Update language if provided\n    if (message.languageCode) {\n      this.languages.set(ws, message.languageCode);\n    }\n    \n    // Store client settings\n    const settings: any = this.clientSettings.get(ws) || {};\n    \n    // Update text-to-speech service type if provided\n    if (message.settings?.ttsServiceType) {\n      settings.ttsServiceType = message.settings.ttsServiceType;\n      console.log(`Client requested TTS service type: ${settings.ttsServiceType}`);\n    }\n    \n    // Store updated settings\n    this.clientSettings.set(ws, settings);\n    \n    console.log('Updated connection:', \n      `role=${this.roles.get(ws)}, languageCode=${this.languages.get(ws)}, ttsService=${settings.ttsServiceType || 'default'}`);\n    \n    // Send confirmation\n    const response = {\n      type: 'register',\n      status: 'success',\n      data: {\n        role: this.roles.get(ws),\n        languageCode: this.languages.get(ws),\n        settings: settings\n      }\n    };\n    \n    ws.send(JSON.stringify(response));\n  }\n  \n  /**\n   * Handle transcription message\n   */\n  private async handleTranscriptionMessage(ws: WebSocketClient, message: any): Promise<void> {\n    console.log('Received transcription from', this.roles.get(ws), ':', message.text);\n    \n    // Start tracking latency when transcription is received\n    const startTime = Date.now();\n    const latencyTracking = {\n      start: startTime,\n      components: {\n        preparation: 0,\n        translation: 0,\n        tts: 0,\n        processing: 0\n      }\n    };\n    \n    const role = this.roles.get(ws);\n    const sessionId = this.sessionIds.get(ws);\n    \n    // Only process transcriptions from teacher\n    if (role !== 'teacher') {\n      console.warn('Ignoring transcription from non-teacher role:', role);\n      return;\n    }\n    \n    // Get all student connections\n    const studentConnections: WebSocketClient[] = [];\n    const studentLanguages: string[] = [];\n    \n    this.connections.forEach(client => {\n      const clientRole = this.roles.get(client);\n      const clientLanguage = this.languages.get(client);\n      \n      if (clientRole === 'student' && clientLanguage) {\n        studentConnections.push(client);\n        \n        // Only add unique languages\n        if (!studentLanguages.includes(clientLanguage)) {\n          studentLanguages.push(clientLanguage);\n        }\n      }\n    });\n    \n    if (studentConnections.length === 0) {\n      console.log('No students connected, skipping translation');\n      return;\n    }\n    \n    // Translate text to all student languages\n    const teacherLanguage = this.languages.get(ws) || 'en-US';\n    \n    // Using our new speechTranslationService to perform translations\n    // This is a simplified implementation as we don't have translateTextToMultipleLanguages in the service\n    const translations: Record<string, string> = {};\n    \n    // Translate for each language\n    // Define a type for translation results that includes audioBuffer\n    const translationResults: Record<string, { \n      originalText: string;\n      translatedText: string;\n      audioBuffer: Buffer;\n    }> = {};\n    \n    for (const targetLanguage of studentLanguages) {\n      try {\n        // Get the teacher's preferred TTS service type\n        let teacherTtsServiceType = process.env.TTS_SERVICE_TYPE || 'browser';\n        \n        // Look for the teacher's TTS service preference\n        this.connections.forEach(client => {\n          if (this.roles.get(client) === 'teacher' &&\n              this.clientSettings.get(client)?.ttsServiceType) {\n            // Use the teacher's preference for all student translations\n            teacherTtsServiceType = this.clientSettings.get(client)?.ttsServiceType;\n          }\n        });\n        \n        // Always use OpenAI TTS service for best quality\n        const ttsServiceToUse = 'openai';\n        console.log(`Using OpenAI TTS service for language '${targetLanguage}' (overriding teacher's selection)`);\n        \n        // Measure translation and TTS latency\n        const translationStartTime = Date.now();\n        \n        // Perform the translation with OpenAI TTS service\n        const result = await speechTranslationService.translateSpeech(\n          Buffer.from(''), // Empty buffer as we already have the text\n          teacherLanguage,\n          targetLanguage,\n          message.text, // Use the pre-transcribed text\n          { ttsServiceType: ttsServiceToUse } // Force OpenAI TTS service\n        );\n        \n        // Record the translation/TTS latency\n        const translationEndTime = Date.now();\n        const elapsedTime = translationEndTime - translationStartTime;\n        \n        // Since this includes both translation and TTS, we'll estimate the split\n        // TTS typically takes about 70% of the time\n        const ttsTime = Math.round(elapsedTime * 0.7);\n        const translationTime = elapsedTime - ttsTime;\n        \n        latencyTracking.components.translation = Math.max(\n          latencyTracking.components.translation,\n          translationTime\n        );\n        \n        latencyTracking.components.tts = Math.max(\n          latencyTracking.components.tts,\n          ttsTime\n        );\n        \n        // Store the full result object for this language\n        translationResults[targetLanguage] = result;\n        \n        // Also store just the text for backward compatibility\n        translations[targetLanguage] = result.translatedText;\n      } catch (error) {\n        console.error(`Error translating to ${targetLanguage}:`, error);\n        translations[targetLanguage] = message.text; // Fallback to original text\n        translationResults[targetLanguage] = {\n          originalText: message.text,\n          translatedText: message.text,\n          audioBuffer: Buffer.from('') // Empty buffer for fallback\n        };\n      }\n    }\n    \n    // Calculate processing latency before sending translations\n    const processingEndTime = Date.now();\n    latencyTracking.components.processing = processingEndTime - startTime - latencyTracking.components.translation;\n    \n    // Send translations to students\n    studentConnections.forEach(client => {\n      const studentLanguage = this.languages.get(client);\n      if (!studentLanguage) return;\n      \n      const translatedText = translations[studentLanguage] || message.text;\n      \n      // Always use OpenAI TTS service - ignore any other settings\n      const ttsServiceType = 'openai';\n      \n      // Calculate total latency up to this point\n      const currentTime = Date.now();\n      const totalLatency = currentTime - startTime;\n      \n      // Create translation message with audio data support and latency metrics\n      const translationMessage: any = {\n        type: 'translation',\n        text: translatedText,\n        originalText: message.text,\n        sourceLanguage: teacherLanguage,\n        targetLanguage: studentLanguage,\n        ttsServiceType: ttsServiceType, // Include the service type for client reference\n        latency: {\n          total: totalLatency,\n          serverCompleteTime: currentTime, // Timestamp when server completed processing\n          components: {\n            translation: latencyTracking.components.translation,\n            tts: latencyTracking.components.tts,\n            processing: latencyTracking.components.processing,\n            network: 0 // Will be calculated on client side\n          }\n        }\n      };\n      \n      // If we have a translation result with audio buffer, include it\n      if (translationResults[studentLanguage] && translationResults[studentLanguage].audioBuffer) {\n        try {\n          const audioBuffer = translationResults[studentLanguage].audioBuffer;\n          \n          // Check if this is a special marker for browser speech synthesis\n          const bufferString = audioBuffer.toString('utf8');\n          \n          if (bufferString.startsWith('{\"type\":\"browser-speech\"')) {\n            // This is a marker for browser-based speech synthesis\n            console.log(`Using client browser speech synthesis for ${studentLanguage}`);\n            translationMessage.useClientSpeech = true;\n            try {\n              translationMessage.speechParams = JSON.parse(bufferString);\n              console.log(`Successfully parsed speech params for ${studentLanguage}`);\n            } catch (jsonError) {\n              console.error('Error parsing speech params:', jsonError);\n              translationMessage.speechParams = {\n                type: 'browser-speech',\n                text: translatedText,\n                languageCode: studentLanguage,\n                autoPlay: true\n              };\n            }\n          } else if (audioBuffer.length > 0) {\n            // This is actual audio data - encode as base64\n            translationMessage.audioData = audioBuffer.toString('base64');\n            translationMessage.useClientSpeech = false; // Explicitly set to false\n            \n            // Log audio data details for debugging\n            console.log(`Sending ${audioBuffer.length} bytes of audio data to client`);\n            console.log(`Using OpenAI TTS service for ${studentLanguage} (teacher preference: ${ttsServiceType})`);\n            console.log(`First 16 bytes of audio: ${Array.from(audioBuffer.slice(0, 16)).map(b => b.toString(16).padStart(2, '0')).join(' ')}`);\n          }\n        } catch (error) {\n          console.error('Error processing audio data for translation:', error);\n        }\n      } else {\n        console.log(`Warning: No audio buffer available for language ${studentLanguage} with TTS service ${ttsServiceType}`);\n      }\n      \n      client.send(JSON.stringify(translationMessage));\n    });\n  }\n  \n  /**\n   * Handle audio message\n   */\n  private async handleAudioMessage(ws: WebSocketClient, message: any): Promise<void> {\n    const role = this.roles.get(ws);\n    const sessionId = this.sessionIds.get(ws);\n    \n    console.log('Processing message type=audio from connection:', \n      `role=${role}, languageCode=${this.languages.get(ws)}`);\n    \n    if (role === 'teacher') {\n      console.log('Processing teacher audio (detected from role info), data length:', message.data?.length);\n      await this.processTeacherAudio(ws, message.data);\n    } else {\n      console.log('Ignoring audio from non-teacher role:', role);\n    }\n  }\n  \n  /**\n   * Process audio from teacher\n   */\n  private async processTeacherAudio(ws: WebSocketClient, audioData: string): Promise<void> {\n    if (!audioData || audioData.length < 100) {\n      console.log('Received invalid or too small audio data (length:', audioData?.length, ')');\n      return;\n    }\n    \n    console.log('Processing audio data (length:', audioData.length, ') from teacher...');\n    \n    const sessionId = this.sessionIds.get(ws);\n    const teacherSessionId = `teacher_${sessionId}`;\n    \n    // In a real implementation, this would process the audio and get transcription\n    // Since we're using Web Speech API on the client side, this is just a fallback\n    \n    console.warn(`⚠️ No Web Speech API transcription found for ${teacherSessionId}, cannot process audio`);\n  }\n  \n  /**\n   * Handle TTS request message\n   * \n   * Follows SOLID principles - Single Responsibility:\n   * This method only coordinates the TTS request handling,\n   * delegating the actual work to specialized methods\n   */\n  private async handleTTSRequestMessage(ws: WebSocketClient, message: any): Promise<void> {\n    const role = this.roles.get(ws);\n    const languageCode = message.languageCode || this.languages.get(ws);\n    // Always force OpenAI TTS service regardless of what was requested\n    const ttsService = 'openai';\n    const text = message.text;\n    \n    console.log(`Received TTS request from ${role} (forcing OpenAI TTS service) in language ${languageCode}`);\n    \n    if (!this.validateTTSRequest(text, languageCode)) {\n      return;\n    }\n    \n    try {\n      const audioResult = await this.generateTTSAudio(text, languageCode, ttsService);\n      await this.sendTTSResponse(ws, {\n        text,\n        languageCode,\n        ttsService,\n        ...audioResult\n      });\n    } catch (error) {\n      const errorMsg = error instanceof Error ? error.message : String(error);\n      await this.sendTTSErrorResponse(ws, {\n        text,\n        languageCode,\n        ttsService,\n        errorMsg\n      });\n    }\n  }\n  \n  /**\n   * Validate TTS request parameters\n   * \n   * @param text The text to synthesize\n   * @param languageCode The language code for synthesis\n   * @returns boolean indicating if the request is valid\n   */\n  private validateTTSRequest(text: string, languageCode: string): boolean {\n    if (!text || !languageCode) {\n      console.error('Missing required parameters for TTS request');\n      return false;\n    }\n    return true;\n  }\n  \n  /**\n   * Generate audio using the specified TTS service\n   * \n   * @param text The text to synthesize\n   * @param languageCode The language code for synthesis\n   * @param ttsService The TTS service to use\n   * @returns Object containing success status and audio buffer (if successful)\n   */\n  private async generateTTSAudio(\n    text: string, \n    languageCode: string, \n    ttsService: string\n  ): Promise<{ success: boolean; audioData?: string; error?: string }> {\n    try {\n      // Use the translation service to generate speech audio with specific TTS service\n      const result = await speechTranslationService.translateSpeech(\n        Buffer.from(''), // Empty buffer since we have the text\n        'en-US',        // Source language doesn't matter for TTS\n        languageCode,\n        text,           // The text to synthesize\n        { ttsServiceType: ttsService } // Pass TTS service directly\n      );\n      \n      // Check if we have valid audio data\n      if (result && result.audioBuffer && result.audioBuffer.length > 0) {\n        return {\n          success: true,\n          audioData: result.audioBuffer.toString('base64')\n        };\n      } else {\n        console.warn(`No audio data generated for TTS service ${ttsService}`);\n        return {\n          success: false,\n          error: 'No audio data generated'\n        };\n      }\n    } catch (error) {\n      console.error(`Error generating audio for TTS service ${ttsService}:`, error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : String(error)\n      };\n    }\n  }\n  \n  /**\n   * Send successful TTS response to client\n   * \n   * @param ws The WebSocket client to send response to\n   * @param responseData The response data\n   */\n  private async sendTTSResponse(\n    ws: WebSocketClient, \n    responseData: { \n      text: string; \n      languageCode: string; \n      ttsService: string;\n      success: boolean;\n      audioData?: string;\n      error?: string;\n    }\n  ): Promise<void> {\n    const response = {\n      type: 'tts_response',\n      ...responseData\n    };\n    \n    ws.send(JSON.stringify(response));\n  }\n  \n  /**\n   * Send error TTS response to client\n   * \n   * @param ws The WebSocket client to send response to\n   * @param errorData The error data\n   */\n  private async sendTTSErrorResponse(\n    ws: WebSocketClient, \n    errorData: { \n      text: string; \n      languageCode: string; \n      ttsService: string;\n      errorMsg: string;\n    }\n  ): Promise<void> {\n    console.error(`Error processing TTS request with service ${errorData.ttsService}:`, errorData.errorMsg);\n    \n    const errorResponse = {\n      type: 'tts_response',\n      text: errorData.text,\n      ttsService: errorData.ttsService,\n      languageCode: errorData.languageCode,\n      success: false,\n      error: errorData.errorMsg\n    };\n    \n    ws.send(JSON.stringify(errorResponse));\n  }\n  \n  /**\n   * Handle settings message\n   * \n   * Updates client settings such as TTS service type\n   */\n  private handleSettingsMessage(ws: WebSocketClient, message: any): void {\n    const role = this.roles.get(ws);\n    console.log(`Processing settings update from ${role}:`, message);\n    \n    // Get existing settings or create new object\n    const settings: any = this.clientSettings.get(ws) || {};\n    \n    // Update TTS service type if provided\n    if (message.ttsServiceType) {\n      settings.ttsServiceType = message.ttsServiceType;\n      console.log(`Updated TTS service type for ${role} to: ${settings.ttsServiceType}`);\n    }\n    \n    // Store updated settings\n    this.clientSettings.set(ws, settings);\n    \n    // If this is a teacher, log that the TTS service preference will be used for all students\n    if (role === 'teacher' && message.ttsServiceType) {\n      console.log(`Teacher's TTS service preference set to '${message.ttsServiceType}'. This will be used for all student translations.`);\n    }\n    \n    // Send confirmation\n    const response = {\n      type: 'settings',\n      status: 'success',\n      data: settings\n    };\n    \n    ws.send(JSON.stringify(response));\n  }\n\n  /**\n   * Handle ping message for latency measurement\n   */\n  private handlePingMessage(ws: WebSocketClient, message: any): void {\n    try {\n      // Get client information\n      const role = this.roles.get(ws) || 'unknown';\n      const language = this.languages.get(ws) || 'unknown';\n      const sessionId = this.sessionIds.get(ws) || 'unknown';\n      \n      // Calculate server processing time\n      const serverReceiveTime = Date.now();\n      \n      // Log ping request for diagnostics\n      console.log(`Received ping request from ${role} (${sessionId}), timestamp: ${message.timestamp}`);\n      \n      // Respond with pong message\n      const response = {\n        type: 'pong',\n        timestamp: message.timestamp,\n        serverReceiveTime: serverReceiveTime,\n        serverSendTime: Date.now(),\n        clientInfo: {\n          role,\n          language,\n          sessionId\n        }\n      };\n      \n      ws.send(JSON.stringify(response));\n    } catch (error) {\n      console.error('Error handling ping message:', error);\n    }\n  }\n  \n  /**\n   * Handle WebSocket close event\n   */\n  private handleClose(ws: WebSocketClient): void {\n    console.log('WebSocket disconnected, sessionId:', this.sessionIds.get(ws));\n    \n    // Remove from all tracking maps\n    this.connections.delete(ws);\n    this.roles.delete(ws);\n    this.languages.delete(ws);\n    this.sessionIds.delete(ws);\n  }\n  \n  /**\n   * Set up heartbeat mechanism to detect stale connections\n   */\n  private setupHeartbeat(): void {\n    const interval = setInterval(() => {\n      this.wss.clients.forEach((ws: any) => {\n        // Cast the standard WebSocket to our custom type \n        const client = ws as unknown as WebSocketClient;\n        \n        if (client.isAlive === false) {\n          console.log('Terminating inactive WebSocket connection');\n          return client.terminate();\n        }\n        \n        client.isAlive = false;\n        client.ping();\n        \n        // Also send a ping message for clients that don't respond to standard pings\n        const pingMessage = {\n          type: 'ping',\n          timestamp: Date.now()\n        };\n        \n        try {\n          client.send(JSON.stringify(pingMessage));\n        } catch (error) {\n          // Ignore errors during ping\n        }\n      });\n    }, 30000); // Check every 30 seconds\n    \n    // Clear interval on server close\n    this.wss.on('close', () => {\n      clearInterval(interval);\n    });\n  }\n  \n  /**\n   * Get all active connections\n   */\n  public getConnections(): Set<WebSocketClient> {\n    return this.connections;\n  }\n  \n  /**\n   * Get role for a specific connection\n   */\n  public getRole(ws: WebSocketClient): string | undefined {\n    return this.roles.get(ws);\n  }\n  \n  /**\n   * Get language for a specific connection\n   */\n  public getLanguage(ws: WebSocketClient): string | undefined {\n    return this.languages.get(ws);\n  }\n}"]}