{"version":3,"file":"storage.js","sourceRoot":"","sources":["../../server/storage.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  users,\n  type User,\n  type InsertUser,\n  languages,\n  type Language,\n  type InsertLanguage,\n  translations,\n  type Translation,\n  type InsertTranslation,\n  transcripts,\n  type Transcript,\n  type InsertTranscript\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Language methods\n  getLanguages(): Promise<Language[]>;\n  getActiveLanguages(): Promise<Language[]>;\n  getLanguageByCode(code: string): Promise<Language | undefined>;\n  createLanguage(language: InsertLanguage): Promise<Language>;\n  updateLanguageStatus(code: string, isActive: boolean): Promise<Language | undefined>;\n  \n  // Translation methods\n  addTranslation(translation: InsertTranslation): Promise<Translation>;\n  getTranslationsByLanguage(targetLanguage: string, limit?: number): Promise<Translation[]>;\n  \n  // Transcript methods\n  addTranscript(transcript: InsertTranscript): Promise<Transcript>;\n  getTranscriptsBySession(sessionId: string, language: string): Promise<Transcript[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private languages: Map<number, Language>;\n  private translations: Map<number, Translation>;\n  private transcripts: Map<number, Transcript>;\n  \n  private userId: number;\n  private languageId: number;\n  private translationId: number;\n  private transcriptId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.languages = new Map();\n    this.translations = new Map();\n    this.transcripts = new Map();\n    \n    this.userId = 1;\n    this.languageId = 1;\n    this.translationId = 1;\n    this.transcriptId = 1;\n    \n    // Initialize with default languages\n    this.initializeDefaultLanguages();\n  }\n\n  private initializeDefaultLanguages() {\n    const defaultLanguages: InsertLanguage[] = [\n      { code: \"en-US\", name: \"English (United States)\", isActive: true },\n      { code: \"es\", name: \"Spanish\", isActive: true },\n      { code: \"de\", name: \"German\", isActive: true },\n      { code: \"fr\", name: \"French\", isActive: true }\n    ];\n    \n    defaultLanguages.forEach(lang => {\n      this.createLanguage(lang);\n    });\n  }\n\n  // User methods\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.userId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n  \n  // Language methods\n  async getLanguages(): Promise<Language[]> {\n    return Array.from(this.languages.values());\n  }\n  \n  async getActiveLanguages(): Promise<Language[]> {\n    return Array.from(this.languages.values()).filter(lang => lang.isActive);\n  }\n  \n  async getLanguageByCode(code: string): Promise<Language | undefined> {\n    return Array.from(this.languages.values()).find(lang => lang.code === code);\n  }\n  \n  async createLanguage(insertLanguage: InsertLanguage): Promise<Language> {\n    const id = this.languageId++;\n    const language: Language = { ...insertLanguage, id };\n    this.languages.set(id, language);\n    return language;\n  }\n  \n  async updateLanguageStatus(code: string, isActive: boolean): Promise<Language | undefined> {\n    const language = await this.getLanguageByCode(code);\n    if (!language) return undefined;\n    \n    const updatedLanguage: Language = { ...language, isActive };\n    this.languages.set(language.id, updatedLanguage);\n    return updatedLanguage;\n  }\n  \n  // Translation methods\n  async addTranslation(insertTranslation: InsertTranslation): Promise<Translation> {\n    const id = this.translationId++;\n    const timestamp = new Date();\n    const translation: Translation = { ...insertTranslation, id, timestamp };\n    this.translations.set(id, translation);\n    return translation;\n  }\n  \n  async getTranslationsByLanguage(targetLanguage: string, limit = 10): Promise<Translation[]> {\n    return Array.from(this.translations.values())\n      .filter(t => t.targetLanguage === targetLanguage)\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, limit);\n  }\n  \n  // Transcript methods\n  async addTranscript(insertTranscript: InsertTranscript): Promise<Transcript> {\n    const id = this.transcriptId++;\n    const timestamp = new Date();\n    const transcript: Transcript = { ...insertTranscript, id, timestamp };\n    this.transcripts.set(id, transcript);\n    return transcript;\n  }\n  \n  async getTranscriptsBySession(sessionId: string, language: string): Promise<Transcript[]> {\n    return Array.from(this.transcripts.values())\n      .filter(t => t.sessionId === sessionId && t.language === language)\n      .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());\n  }\n}\n\nexport const storage = new MemStorage();\n"]}