{"version":3,"file":"websocket.js","sourceRoot":"","sources":["../../server/websocket.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * WebSocket Utilities\n * \n * This module provides a clean, object-oriented approach to WebSocket handling\n * following SOLID principles:\n * - Single Responsibility: Each class has one job\n * - Open/Closed: Extend functionality through decorators or strategy pattern\n * - Liskov Substitution: Subtypes are substitutable for their base types\n * - Interface Segregation: Clients use only what they need\n * - Dependency Inversion: High-level modules depend on abstractions\n */\nimport { WebSocketServer as WSServer, WebSocket } from 'ws';\nimport { Server } from 'http';\nimport { IncomingMessage } from 'http';\n\n// WebSocket connection states\nexport const WebSocketState = {\n  CONNECTING: 0,\n  OPEN: 1,\n  CLOSING: 2,\n  CLOSED: 3\n};\n\n// Types for clearer interfaces\nexport type MessageHandler = (ws: ExtendedWebSocket, message: any) => void;\nexport type ConnectionHandler = (ws: ExtendedWebSocket, request: IncomingMessage) => void;\nexport type CloseHandler = (ws: ExtendedWebSocket, code: number, reason: string) => void;\n\n// Extended WebSocket interface for tracking custom properties\nexport interface ExtendedWebSocket extends WebSocket {\n  isAlive: boolean;\n  sessionId?: string;\n  role?: 'teacher' | 'student';\n  languageCode?: string;\n}\n\n/**\n * WebSocketMessage interface to ensure consistent message format\n */\nexport interface WebSocketMessage {\n  type: string;\n  [key: string]: any;\n}\n\n/**\n * WebSocketServerConfig for configuration options\n */\nexport interface WebSocketServerConfig {\n  path?: string;\n  heartbeatInterval?: number;\n  logLevel?: 'none' | 'error' | 'warn' | 'info' | 'debug';\n}\n\n/**\n * WebSocketService class - Encapsulates WebSocket server operations\n * Following Single Responsibility Principle: one class, one responsibility\n */\nexport class WebSocketService {\n  private wss: WSServer;\n  private heartbeatInterval: NodeJS.Timeout | null = null;\n  private config: Required<WebSocketServerConfig>;\n  private messageHandlers: Map<string, MessageHandler[]> = new Map();\n  private connectionHandlers: ConnectionHandler[] = [];\n  private closeHandlers: CloseHandler[] = [];\n\n  // Default configuration\n  private static readonly DEFAULT_CONFIG: Required<WebSocketServerConfig> = {\n    path: '/ws',\n    heartbeatInterval: 30000,\n    logLevel: 'info'\n  };\n\n  /**\n   * Creates a new WebSocketService\n   */\n  constructor(\n    private server: Server,\n    config: WebSocketServerConfig = {}\n  ) {\n    // Merge provided config with defaults\n    this.config = {\n      ...WebSocketService.DEFAULT_CONFIG,\n      ...config\n    };\n\n    // Initialize WebSocket server\n    this.wss = new WSServer({ \n      server: this.server, \n      path: this.config.path \n    });\n\n    this.log('info', `WebSocket server initialized and listening on path: ${this.config.path}`);\n    \n    // Setup the core event handlers\n    this.setupEventHandlers();\n    \n    // Setup heartbeat mechanism\n    this.setupHeartbeat();\n  }\n\n  /**\n   * Set up core WebSocket event handlers\n   */\n  private setupEventHandlers(): void {\n    // Handle new connections\n    this.wss.on('connection', (ws: WebSocket, request: IncomingMessage) => {\n      // Log the headers for debugging\n      this.log('debug', 'WebSocket connection verification, headers:', request.headers);\n      \n      const extendedWs = ws as ExtendedWebSocket;\n      extendedWs.isAlive = true;\n      \n      // Generate a unique session ID\n      extendedWs.sessionId = `session_${Date.now()}_${Math.floor(Math.random() * 100)}`;\n      \n      this.log('info', `New WebSocket connection from ${request.socket.remoteAddress} path: ${request.url}`);\n      this.log('debug', 'Headers:', request.headers);\n      \n      // Handle pong messages for heartbeat\n      extendedWs.on('pong', () => {\n        extendedWs.isAlive = true;\n      });\n      \n      // Handle incoming messages and route to appropriate handlers\n      extendedWs.on('message', (rawData) => {\n        try {\n          // Parse message\n          const data = rawData.toString();\n          const message = JSON.parse(data);\n          this.log('debug', `Received message type=${message.type || 'unknown'}`);\n          \n          // Process message by type\n          if (message.type === 'register') {\n            this.log('info', `Processing message type=${message.type} from connection: role=${message.role}, languageCode=${message.languageCode}`);\n            \n            // If role is changing, log it\n            if (extendedWs.role !== message.role) {\n              this.log('info', `Changing connection role from ${extendedWs.role} to ${message.role}`);\n            }\n            \n            // Update connection properties\n            extendedWs.role = message.role;\n            extendedWs.languageCode = message.languageCode;\n            \n            this.log('info', `Updated connection: role=${extendedWs.role}, languageCode=${extendedWs.languageCode}`);\n          }\n          \n          // Find and execute all registered handlers for this message type\n          const handlers = this.messageHandlers.get(message.type) || [];\n          handlers.forEach(handler => {\n            try {\n              handler(extendedWs, message);\n            } catch (handlerError) {\n              this.log('error', `Error in message handler for type ${message.type}:`, handlerError);\n            }\n          });\n          \n        } catch (error) {\n          this.log('error', 'Error processing message:', error);\n        }\n      });\n      \n      // Handle connection close\n      extendedWs.on('close', (code: number, reason: string) => {\n        this.log('info', `WebSocket disconnected, sessionId: ${extendedWs.sessionId}`);\n        \n        // Execute close handlers\n        this.closeHandlers.forEach(handler => {\n          try {\n            handler(extendedWs, code, reason);\n          } catch (handlerError) {\n            this.log('error', 'Error in close handler:', handlerError);\n          }\n        });\n      });\n      \n      // Send connection confirmation\n      this.sendToClient(extendedWs, {\n        type: 'connection',\n        sessionId: extendedWs.sessionId,\n        status: 'connected',\n        timestamp: Date.now()\n      });\n      \n      this.log('info', `Sending connection confirmation with sessionId: ${extendedWs.sessionId}`);\n      this.log('info', 'Connection confirmation sent successfully');\n      \n      // Execute connection handlers\n      this.connectionHandlers.forEach(handler => {\n        try {\n          handler(extendedWs, request);\n        } catch (handlerError) {\n          this.log('error', 'Error in connection handler:', handlerError);\n        }\n      });\n    });\n    \n    // Handle server close\n    this.wss.on('close', () => {\n      this.log('info', 'WebSocket server closed');\n      this.cleanup();\n    });\n  }\n\n  /**\n   * Set up heartbeat mechanism to detect dead connections\n   */\n  private setupHeartbeat(): void {\n    this.heartbeatInterval = setInterval(() => {\n      this.wss.clients.forEach((ws: WebSocket) => {\n        const extendedWs = ws as ExtendedWebSocket;\n        \n        if (extendedWs.isAlive === false) {\n          this.log('debug', `Terminating inactive connection: ${extendedWs.sessionId}`);\n          return extendedWs.terminate();\n        }\n        \n        extendedWs.isAlive = false;\n        extendedWs.ping();\n      });\n    }, this.config.heartbeatInterval);\n  }\n\n  /**\n   * Clean up resources\n   */\n  private cleanup(): void {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      this.heartbeatInterval = null;\n    }\n  }\n\n  /**\n   * Register a message handler for a specific message type\n   */\n  public onMessage(type: string, handler: MessageHandler): void {\n    if (!this.messageHandlers.has(type)) {\n      this.messageHandlers.set(type, []);\n    }\n    this.messageHandlers.get(type)!.push(handler);\n  }\n\n  /**\n   * Register a connection handler\n   */\n  public onConnection(handler: ConnectionHandler): void {\n    this.connectionHandlers.push(handler);\n  }\n\n  /**\n   * Register a close handler\n   */\n  public onClose(handler: CloseHandler): void {\n    this.closeHandlers.push(handler);\n  }\n\n  /**\n   * Broadcast a message to all connected clients\n   */\n  public broadcast(message: WebSocketMessage): void {\n    this.wss.clients.forEach((client: WebSocket) => {\n      if (client.readyState === WebSocketState.OPEN) {\n        client.send(JSON.stringify(message));\n      }\n    });\n  }\n\n  /**\n   * Broadcast a message to all connected clients with a specific role\n   */\n  public broadcastToRole(role: 'teacher' | 'student', message: WebSocketMessage): void {\n    this.wss.clients.forEach((client: WebSocket) => {\n      const extendedClient = client as ExtendedWebSocket;\n      if (extendedClient.readyState === WebSocketState.OPEN && extendedClient.role === role) {\n        client.send(JSON.stringify(message));\n      }\n    });\n  }\n\n  /**\n   * Send a message to a specific client\n   */\n  public sendToClient(client: ExtendedWebSocket, message: WebSocketMessage): void {\n    if (client.readyState === WebSocketState.OPEN) {\n      client.send(JSON.stringify(message));\n    }\n  }\n\n  /**\n   * Get all connected clients\n   */\n  public getClients(): Set<WebSocket> {\n    return this.wss.clients;\n  }\n\n  /**\n   * Get the WebSocket server instance\n   */\n  public getServer(): WSServer {\n    return this.wss;\n  }\n\n  /**\n   * Get clients with a specific role\n   */\n  public getClientsByRole(role: 'teacher' | 'student'): ExtendedWebSocket[] {\n    const clients: ExtendedWebSocket[] = [];\n    this.wss.clients.forEach((client: WebSocket) => {\n      const extendedClient = client as ExtendedWebSocket;\n      if (extendedClient.role === role) {\n        clients.push(extendedClient);\n      }\n    });\n    return clients;\n  }\n\n  /**\n   * Simple logging utility that respects the configured log level\n   */\n  private log(level: 'debug' | 'info' | 'warn' | 'error', message: string, ...args: any[]): void {\n    const logLevels = {\n      'none': 0,\n      'error': 1,\n      'warn': 2,\n      'info': 3,\n      'debug': 4\n    };\n    \n    if (logLevels[level] <= logLevels[this.config.logLevel]) {\n      switch (level) {\n        case 'debug':\n          console.log(message, ...args);\n          break;\n        case 'info':\n          console.log(message, ...args);\n          break;\n        case 'warn':\n          console.warn(message, ...args);\n          break;\n        case 'error':\n          console.error(message, ...args);\n          break;\n      }\n    }\n  }\n}\n\n/**\n * Factory function for backward compatibility\n */\nexport function createWebSocketServer(server: Server, path: string = '/ws'): WebSocketService {\n  return new WebSocketService(server, { path });\n}\n\n/**\n * Broadcast function for backward compatibility\n */\nexport function broadcastMessage(wss: WSServer | WebSocketService, message: any): void {\n  if (wss instanceof WebSocketService) {\n    wss.broadcast(message);\n  } else {\n    wss.clients.forEach((client: WebSocket) => {\n      if (client.readyState === WebSocketState.OPEN) {\n        client.send(JSON.stringify(message));\n      }\n    });\n  }\n}\n\n/**\n * SendToClient function for backward compatibility\n */\nexport function sendToClient(client: WebSocket, message: any): void {\n  if (client.readyState === WebSocketState.OPEN) {\n    client.send(JSON.stringify(message));\n  }\n}"]}