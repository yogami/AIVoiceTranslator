#!/bin/bash

# 🔐 Environment Variable Management Script
# This script helps manage environment variables across different environments

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🔐 AI Voice Translator - Environment Variable Management${NC}"
echo "=============================================================="

# Function to generate secure session secret
generate_session_secret() {
    openssl rand -base64 32
}

# Function to validate OpenAI API key format
validate_openai_key() {
    local key=$1
    if [[ $key =~ ^sk-[a-zA-Z0-9_-]+$ ]]; then
        return 0
    else
        return 1
    fi
}

# Function to set Railway variables
set_railway_variables() {
    echo -e "${YELLOW}🚂 Setting Railway Environment Variables${NC}"
    
    # Check if Railway CLI is available
    if ! command -v railway &> /dev/null; then
        echo -e "${RED}❌ Railway CLI not found. Please install it first:${NC}"
        echo "npm install -g @railway/cli"
        exit 1
    fi
    
    # Check if user is logged in
    if ! railway whoami &> /dev/null; then
        echo -e "${YELLOW}🔐 Please login to Railway${NC}"
        railway login
    fi
    
    # Get current project info
    echo -e "${BLUE}📋 Current Railway Project:${NC}"
    railway status
    
    # Get environment type
    echo -e "${YELLOW}🌍 Which environment are you configuring?${NC}"
    echo "1. Production"
    echo "2. Staging"
    read -p "Enter your choice (1-2): " env_choice
    
    case $env_choice in
        1) env_name="Production" ;;
        2) env_name="Staging" ;;
        *) echo -e "${RED}❌ Invalid choice${NC}"; exit 1 ;;
    esac
    
    echo -e "${BLUE}⚙️ Configuring $env_name Environment${NC}"
    
    # Get OpenAI API key
    read -p "Enter your OpenAI API key: " openai_key
    if ! validate_openai_key "$openai_key"; then
        echo -e "${RED}❌ Invalid OpenAI API key format${NC}"
        exit 1
    fi
    
    # Generate session secret
    session_secret=$(generate_session_secret)
    echo -e "${GREEN}✅ Generated secure session secret${NC}"
    
    # Get Railway domain (auto-generated by Railway)
    echo -e "${BLUE}🌐 Railway will auto-generate your domain${NC}"
    echo "Format: https://[your-service-name].railway.app"
    echo "Example: https://aivoicetranslator.railway.app"
    echo ""
    read -p "Enter your Railway domain (or press Enter to use default): " railway_domain
    
    if [[ -z "$railway_domain" ]]; then
        railway_domain="aivoicetranslator.railway.app"
        echo -e "${YELLOW}📝 Using default domain: $railway_domain${NC}"
        echo -e "${BLUE}💡 You can update this later once Railway assigns your actual domain${NC}"
    fi
    
    # Set core variables
    echo -e "${YELLOW}📝 Setting core environment variables...${NC}"
    railway variables set OPENAI_API_KEY="$openai_key"
    railway variables set TTS_SERVICE_TYPE="openai"
    railway variables set NODE_ENV="production"
    railway variables set HOST="0.0.0.0"
    railway variables set SESSION_SECRET="$session_secret"
    
    # Set timeout variables
    echo -e "${YELLOW}⏰ Setting timeout configuration...${NC}"
    railway variables set SESSION_TIMEOUT="3600000"           # 1 hour
    railway variables set INACTIVE_SESSION_TIMEOUT="1800000" # 30 minutes
    
    # Set feature flags
    echo -e "${YELLOW}🎛️ Setting feature flags...${NC}"
    railway variables set ENABLE_DETAILED_TRANSLATION_LOGGING="true"
    railway variables set ENABLE_AUDIO_CACHING="true"
    railway variables set ENABLE_SESSION_PERSISTENCE="true"
    
    # Set logging
    railway variables set LOG_LEVEL="info"
    
    # Set frontend URLs
    echo -e "${YELLOW}🌐 Setting frontend URLs...${NC}"
    railway variables set VITE_API_URL="https://$railway_domain"
    railway variables set VITE_WS_URL="wss://$railway_domain"
    
    echo -e "${GREEN}✅ All environment variables set successfully!${NC}"
    
    # Display summary
    echo -e "${BLUE}📋 Environment Variable Summary:${NC}"
    railway variables
}

# Function to create production environment file
create_production_env() {
    echo -e "${YELLOW}📝 Creating production environment file${NC}"
    
    # Get OpenAI API key
    read -p "Enter your OpenAI API key: " openai_key
    if ! validate_openai_key "$openai_key"; then
        echo -e "${RED}❌ Invalid OpenAI API key format${NC}"
        exit 1
    fi
    
    # Get Railway domain (auto-generated by Railway)
    echo -e "${BLUE}🌐 Railway will auto-generate your domain${NC}"
    echo "Format: https://[your-service-name].railway.app"
    echo "Example: https://aivoicetranslator.railway.app"
    echo ""
    read -p "Enter your Railway domain (or press Enter to use default): " railway_domain
    
    if [[ -z "$railway_domain" ]]; then
        railway_domain="aivoicetranslator.railway.app"
        echo -e "${YELLOW}📝 Using default domain: $railway_domain${NC}"
        echo -e "${BLUE}💡 You can update this later once Railway assigns your actual domain${NC}"
    fi
    
    # Generate session secret
    session_secret=$(generate_session_secret)
    
    # Create .env.production.local file
    cat > .env.production.local << EOF
# Production Environment Variables
# Generated on $(date)
# DO NOT COMMIT THIS FILE TO GIT

# Server Configuration
PORT=\$PORT
HOST=0.0.0.0
NODE_ENV=production

# Database (Auto-configured by Railway)
DATABASE_URL=\$DATABASE_URL

# OpenAI Configuration
OPENAI_API_KEY=$openai_key
TTS_SERVICE_TYPE=openai

# Frontend URLs
VITE_API_URL=https://$railway_domain
VITE_WS_URL=wss://$railway_domain

# Session Configuration
SESSION_SECRET=$session_secret
SESSION_TIMEOUT=3600000
INACTIVE_SESSION_TIMEOUT=1800000

# Feature Flags
ENABLE_DETAILED_TRANSLATION_LOGGING=true
ENABLE_AUDIO_CACHING=true
ENABLE_SESSION_PERSISTENCE=true

# Logging
LOG_LEVEL=info
EOF
    
    echo -e "${GREEN}✅ Created .env.production.local${NC}"
    echo -e "${YELLOW}⚠️  Remember: This file contains secrets and should NOT be committed to Git${NC}"
}

# Function to validate current environment
validate_environment() {
    echo -e "${YELLOW}🔍 Validating current environment${NC}"
    
    # Check if .env.test exists and is valid
    if [[ -f ".env.test" ]]; then
        echo -e "${GREEN}✅ .env.test exists${NC}"
        
        # Check for required variables
        required_vars=("DATABASE_URL" "OPENAI_API_KEY" "VITE_API_URL" "VITE_WS_URL")
        for var in "${required_vars[@]}"; do
            if grep -q "^$var=" .env.test; then
                echo -e "${GREEN}✅ $var is set${NC}"
            else
                echo -e "${RED}❌ $var is missing${NC}"
            fi
        done
    else
        echo -e "${RED}❌ .env.test not found${NC}"
    fi
    
    # Check Railway connection
    if command -v railway &> /dev/null; then
        echo -e "${GREEN}✅ Railway CLI is installed${NC}"
        
        if railway whoami &> /dev/null; then
            echo -e "${GREEN}✅ Railway CLI is authenticated${NC}"
            echo -e "${BLUE}👤 Logged in as: $(railway whoami)${NC}"
        else
            echo -e "${RED}❌ Railway CLI not authenticated${NC}"
        fi
    else
        echo -e "${RED}❌ Railway CLI not installed${NC}"
    fi
}

# Function to sync environment variables
sync_environments() {
    echo -e "${YELLOW}🔄 Syncing environment variables${NC}"
    
    if [[ ! -f ".env.test" ]]; then
        echo -e "${RED}❌ .env.test not found${NC}"
        exit 1
    fi
    
    # Extract variables from .env.test
    echo -e "${BLUE}📋 Variables from .env.test:${NC}"
    grep -v '^#' .env.test | grep -v '^$' | while read -r line; do
        echo "  $line"
    done
    
    echo -e "${YELLOW}Do you want to sync these to Railway? (y/n)${NC}"
    read -p "> " sync_choice
    
    if [[ $sync_choice == "y" || $sync_choice == "Y" ]]; then
        echo -e "${YELLOW}🚂 Syncing to Railway...${NC}"
        railway variables set --file .env.test
        echo -e "${GREEN}✅ Environment variables synced${NC}"
    fi
}

# Main menu
echo -e "${YELLOW}🎯 What would you like to do?${NC}"
echo "1. Set Railway environment variables"
echo "2. Create production environment file"
echo "3. Validate current environment"
echo "4. Sync .env.test to Railway"
echo "5. Display environment variable guide"
echo "6. Exit"

read -p "Enter your choice (1-6): " choice

case $choice in
    1)
        set_railway_variables
        ;;
    2)
        create_production_env
        ;;
    3)
        validate_environment
        ;;
    4)
        sync_environments
        ;;
    5)
        echo -e "${BLUE}📚 Environment Variable Guide:${NC}"
        echo "- Development: Use .env file (not committed)"
        echo "- Testing: Use .env.test file (committed)"
        echo "- Production: Use Railway dashboard or CLI"
        echo "- CI/CD: Use GitHub repository secrets"
        echo ""
        echo "For detailed guide, see: ENVIRONMENT_MANAGEMENT.md"
        ;;
    6)
        echo -e "${GREEN}👋 Goodbye!${NC}"
        exit 0
        ;;
    *)
        echo -e "${RED}❌ Invalid choice${NC}"
        exit 1
        ;;
esac

echo -e "${GREEN}🎉 Environment variable management complete!${NC}"
echo -e "${BLUE}💡 Next steps:${NC}"
echo "1. Test your configuration with: railway run -- npm start"
echo "2. Deploy to Railway: railway deploy"
echo "3. Check health: curl https://your-domain.railway.app/api/health"
